given a n, either climb 1 or 2 steps at time

i think you just find all the ways 1 and 2 add up to n 

if n = 4 how many ways can 1 (repeated n times) can take u up top so 1 plus it self n times is always base case

1 + 1 + 1 + 1
1 + 2 + 1
2 + 1 + 1
1 + 1 + 2 

getting to the other is the sum of all ones before 

for example to get to 5 take all of step 4's ways and put it in there just add plus 1

each index is at the floor u are on the array we store is the number of ways to reach each step so i did [1,1,2] at index 0 which is ground level there is only one way 

so it says 1, at index 1 its also just one way 1 single step so thats why the value there is also 1, then at index 2 theres two ways to get to the second step, count the index 

ways before it so 1+1 = 2 and just 2 steps straight making it 2 ways which is the value.

the for loop we start it from step 3 as we already gave ways for the first two steps. the formula being used is

the formula we are using is (ways[step-1]+ways[step-2]) and if you take a look this is the FIBONACCI SEQUENCE, where you are adding the current value you are at, with the value

before it to GET the value after it [1,1,2] = 1+1 = 2 so next number will be 2+1 = 3, [1,1,2,3] meaning in our code to get to step 3 there are 3 ways using only 1 or 2 steps


